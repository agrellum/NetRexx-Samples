# Syntax rules for the Vala programming language

context default
    keyword whole bool brightmagenta
    keyword whole char brightmagenta
    keyword whole double brightmagenta
    keyword whole enum brightmagenta
    keyword whole float brightmagenta
    keyword whole int brightmagenta
    keyword whole int16 brightmagenta
    keyword whole int32 brightmagenta
    keyword whole int64 brightmagenta
    keyword whole int8 brightmagenta
    keyword whole long brightmagenta
    keyword whole short brightmagenta
    keyword whole size_t brightmagenta
    keyword whole ssize_t brightmagenta
    keyword whole string brightmagenta
    keyword whole uchar brightmagenta
    keyword whole uint brightmagenta
    keyword whole uint16 brightmagenta
    keyword whole uint32 brightmagenta
    keyword whole uint64 brightmagenta
    keyword whole uint8 brightmagenta
    keyword whole ulong brightmagenta
    keyword whole unichar brightmagenta
    keyword whole ushort brightmagenta

    keyword whole abstract yellow
    keyword whole as yellow
    keyword whole assert yellow
    keyword whole break yellow
    keyword whole case yellow
    keyword whole catch yellow
    keyword whole class yellow
    keyword whole const yellow
    keyword whole construct yellow
    keyword whole continue yellow
    keyword whole default yellow
    keyword whole delegate yellow
    keyword whole delete yellow
    keyword whole do yellow
    keyword whole double yellow
    keyword whole else yellow
    keyword whole ensures yellow
    keyword whole extern yellow
    keyword whole finally yellow
    keyword whole float yellow
    keyword whole for yellow
    keyword whole foreach yellow
    keyword whole get yellow
    keyword whole goto yellow
    keyword whole if yellow
    keyword whole in yellow
    keyword whole inline yellow
    keyword whole interface yellow
    keyword whole internal yellow
    keyword whole is yellow
    keyword whole lock yellow
    keyword whole long yellow
    keyword whole namespace yellow
    keyword whole new yellow
    keyword whole null yellow
    keyword whole operator yellow
    keyword whole out yellow
    keyword whole override yellow
    keyword whole owned yellow
    keyword whole private yellow
    keyword whole protected yellow
    keyword whole public yellow
    keyword whole ref yellow
    keyword whole requires yellow
    keyword whole return yellow
    keyword whole set yellow
    keyword whole short yellow
    keyword whole signal yellow
    keyword whole sizeof yellow
    keyword whole static yellow
    keyword whole struct yellow
    keyword whole switch yellow
    keyword whole this yellow
    keyword whole throw yellow
    keyword whole throws yellow
    keyword whole try yellow
    keyword whole typedef yellow
    keyword whole typeof yellow
    keyword whole union yellow
    keyword whole unowned yellow
    keyword whole ushort yellow
    keyword whole using yellow
    keyword whole var yellow
    keyword whole virtual yellow
    keyword whole void yellow
    keyword whole weak yellow
    keyword whole while yellow
    keyword whole yield yellow

    keyword whole linestart \{\s\t\}\[\s\t\]#*\n brightmagenta
    keyword whole \[\s\t\]default yellow
    keyword whole linestart \[\s\t\]\{ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz\}\[0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz\]: cyan

    keyword /\* brown
    keyword \*/ brown
    keyword // brown

    keyword '\\\{"abtnvfr\}' brightgreen
    keyword '\\\{0123\}\{01234567\}\{01234567\}' brightgreen
    keyword '\\'' brightgreen
    keyword '\\\\' brightgreen
    keyword '\\0' brightgreen
    keyword '\{\s!"#$%&()\*\+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_`abcdefghijklmnopqrstuvwxyz{|}~ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ\}' brightgreen

# punctuation characters, sorted by ASCII code
    keyword ! yellow
    keyword % yellow
    keyword && yellow
    keyword & brightmagenta
    keyword ( brightcyan
    keyword ) brightcyan
    keyword \* yellow
    keyword \+ yellow
    keyword , brightcyan
    keyword - yellow
    keyword / yellow
    keyword : brightcyan
    keyword ; brightmagenta
    keyword < yellow
    keyword = yellow
    keyword > yellow
    keyword ? brightcyan
    keyword [ brightcyan
    keyword ] brightcyan
    keyword ^ brightmagenta
    keyword { brightcyan
    keyword || yellow
    keyword | brightmagenta
    keyword } brightcyan
    keyword ~ brightmagenta

context exclusive /\* \*/ brown
    spellcheck

context exclusive // \n brown
    spellcheck

context linestart # \n brightred
    keyword \\\n yellow
    keyword /\**\*/ brown
    keyword //*\n brown
    keyword "+" red
    keyword <+> red

context " " green
    spellcheck
    keyword \\" brightgreen
    keyword %% brightgreen
    keyword %\[#0\s-\+,\]\[0123456789\*\]\[.\]\[0123456789\*\]\[L\]\{eEfgGoxX\} brightgreen
    keyword %\[0\s-\+,\]\[0123456789\*\]\[.\]\[0123456789\*\]\[hl\]\{diuxX\} brightgreen
    keyword %\[hl\]n brightgreen
    keyword %\[-\]\[0123456789\*\]\[.\]\[0123456789\*\]s brightgreen
    keyword %[*] brightgreen
    keyword %c brightgreen
    keyword %p brightgreen
    keyword \\\{0123\}\{01234567\}\{01234567\} brightgreen
    keyword \\\\ brightgreen
    keyword \\' brightgreen
    keyword \\\{abtnvfr\} brightgreen
