--- oorexx-haiku-5.0.0/common/platform/unix/SysFile.cpp	2019-02-19 16:11:38.676069376 +0000
+++ oorexx-haiku-5.0.0/common/platform/unix/SysFile.cpp	2019-02-19 17:11:41.087556096 +0000
@@ -62,7 +62,7 @@
 # include <sys/filio.h>
 #endif
 
-#if defined __APPLE__
+#if defined __APPLE__ || defined(__HAIKU__)
 # define lseek64 lseek
 # define open64 open
 // avoid warning: '(f)stat64' is deprecated: first deprecated in macOS 10.6
--- oorexx-haiku-5.0.0/extensions/platform/unix/rxunixsys/rxunixsys.cpp	2019-02-19 16:11:44.157286400 +0000
+++ oorexx-haiku-5.0.0/extensions/platform/unix/rxunixsys/rxunixsys.cpp	2019-02-19 17:11:41.089128960 +0000
@@ -1108,7 +1108,7 @@
  *
  * @return        Array of file names.
  */
-#if !defined(OPENBSD)
+#if !defined(OPENBSD)  && !defined(__HAIKU__)
 RexxRoutine1(RexxObjectPtr,
              SysWordexp,
              CSTRING, inexp)
@@ -1771,7 +1771,7 @@
 #endif
     REXX_TYPED_ROUTINE(SysGetservbyname, SysGetservbyname),
     REXX_TYPED_ROUTINE(SysGetservbyport, SysGetservbyport),
-#if !defined(OPENBSD)    
+#if !defined(OPENBSD) && !defined(__HAIKU__)
     REXX_TYPED_ROUTINE(SysWordexp, SysWordexp),
 #endif    
 #ifdef HAVE_XATTR_H
--- oorexx-haiku-5.0.0/extensions/platform/unix/rxunixsys/rxunixsys.h	2019-02-19 16:11:44.154664960 +0000
+++ oorexx-haiku-5.0.0/extensions/platform/unix/rxunixsys/rxunixsys.h	2019-02-19 17:11:41.090177536 +0000
@@ -59,7 +59,7 @@
 #include <grp.h>
 #include <time.h>
 #include <netdb.h>
-#if !defined(OPENBSD)
+#if !defined(OPENBSD) && !defined(__HAIKU__)
 #include <wordexp.h>
 #endif
 #if !defined(AIX) && !defined(OPENBSD)
@@ -83,6 +83,10 @@
 # define HOST_NAME_MAX _POSIX_HOST_NAME_MAX
 #endif
 
+#if defined(__HAIKU__)
+# define stat64 stat
+#endif
+
 #ifdef __sun
 # define HOST_NAME_MAX _POSIX_HOST_NAME_MAX
 #endif
--- oorexx-haiku-5.0.0/extensions/rxsock/rxsock.cpp	2019-02-19 16:11:44.394264576 +0000
+++ oorexx-haiku-5.0.0/extensions/rxsock/rxsock.cpp	2019-02-19 17:11:41.091750400 +0000
@@ -520,7 +520,7 @@
         case EPROTOTYPE      : pszErrno = "EPROTOTYPE";           break;
         case ENOPROTOOPT     : pszErrno = "ENOPROTOOPT";          break;
         case EPROTONOSUPPORT : pszErrno = "EPROTONOSUPPORT";      break;
-        case ESOCKTNOSUPPORT : pszErrno = "ESOCKTNOSUPPORT";      break;
+        /* case ESOCKTNOSUPPORT : pszErrno = "ESOCKTNOSUPPORT";      break; */
         case EOPNOTSUPP      : pszErrno = "EOPNOTSUPP";           break;
         case EPFNOSUPPORT    : pszErrno = "EPFNOSUPPORT";         break;
         case EAFNOSUPPORT    : pszErrno = "EAFNOSUPPORT";         break;
@@ -535,7 +535,7 @@
         case EISCONN         : pszErrno = "EISCONN";              break;
         case ENOTCONN        : pszErrno = "ENOTCONN";             break;
         case ESHUTDOWN       : pszErrno = "ESHUTDOWN";            break;
-        case ETOOMANYREFS    : pszErrno = "ETOOMANYREFS";         break;
+        /* case ETOOMANYREFS    : pszErrno = "ETOOMANYREFS";         break; */
         case ETIMEDOUT       : pszErrno = "ETIMEDOUT";            break;
         case ECONNREFUSED    : pszErrno = "ECONNREFUSED";         break;
         case ELOOP           : pszErrno = "ELOOP";                break;
--- oorexx-haiku-5.0.0/extensions/rxsock/rxsockfn.cpp	2019-02-19 16:11:44.396886016 +0000
+++ oorexx-haiku-5.0.0/extensions/rxsock/rxsockfn.cpp	2019-02-19 17:11:41.093585408 +0000
@@ -358,7 +358,7 @@
     ia.s_addr = (*(uint32_t *)pHostEnt->h_addr);// in network byte order already
     return context->String(inet_ntoa(ia));
 #else
-#if defined(OPSYS_AIX) || defined(OPSYS_LINUX)
+#if defined(OPSYS_AIX) || defined(OPSYS_LINUX) || defined (__HAIKU__)
 #define h_addr h_addr_list[0]
 
     char     pszBuff[64];                    /* buffer for ip address*/
@@ -381,7 +381,7 @@
     ia.s_addr = (*(uint32_t *)pHostEnt->h_addr);// in network byte order already
     return context->String(inet_ntoa(ia));
 #else
-    ia.s_addr = htonl(gethostid());
+    /* ia.s_addr = htonl(gethostid()); */
     // set the errno information
     cleanup(context);
     return context->String(inet_ntoa(ia));
--- oorexx-haiku-5.0.0/interpreter/platform/unix/PlatformDefinitions.h	2019-02-19 16:11:25.112984064 +0000
+++ oorexx-haiku-5.0.0/interpreter/platform/unix/PlatformDefinitions.h	2019-02-19 17:11:41.094633984 +0000
@@ -130,7 +130,7 @@
 /* appropriate for this file system.                                          */
 /******************************************************************************/
 
-#define delimiter '/'
+/* #define delimiter '/' */
 #define line_end "\n"
 #define line_end_size 1
 
--- oorexx-haiku-5.0.0/interpreter/platform/unix/SysFileSystem.cpp	2019-02-19 16:11:25.041156608 +0000
+++ oorexx-haiku-5.0.0/interpreter/platform/unix/SysFileSystem.cpp	2019-02-19 17:11:41.096731136 +0000
@@ -65,7 +65,7 @@
 #include "ActivityManager.hpp"
 #include "FileNameBuffer.hpp"
 
-#if defined __APPLE__
+#if defined __APPLE__ || __HAIKU__
 // avoid warning: '(f)stat64' is deprecated: first deprecated in macOS 10.6
 #define stat64 stat
 #define fstat64 fstat
--- oorexx-haiku-5.0.0/interpreter/platform/unix/SysRexxUtil.cpp	2019-02-19 16:11:25.014155776 +0000
+++ oorexx-haiku-5.0.0/interpreter/platform/unix/SysRexxUtil.cpp	2019-02-19 17:11:41.099090432 +0000
@@ -191,7 +191,7 @@
 };
 #endif
 
-#if defined __APPLE__
+#if defined __APPLE__ || __HAIKU__
 #define open64 open
 // avoid warning: '(l)stat64' is deprecated: first deprecated in macOS 10.6
 #define stat64 stat
@@ -1607,19 +1607,19 @@
     else if (!strcasecmp(selector, "PMEM"))  /* Show max memory RSS used   */
     {
         char buffer[100];
-        snprintf(buffer, sizeof(buffer), "Max_Memory_RSS: %ld", struResUse.ru_maxrss);
+        /* snprintf(buffer, sizeof(buffer), "Max_Memory_RSS: %ld", struResUse.ru_maxrss); */
         return context->NewStringFromAsciiz(buffer);
     }
     else if (!strcasecmp(selector, "PSWAPS")) /* Memory has been swapped   */
     {
         char buffer[100];
-        snprintf(buffer, sizeof(buffer), "Memory_swaps: %ld", struResUse.ru_nswap);
+        /* snprintf(buffer, sizeof(buffer), "Memory_swaps: %ld", struResUse.ru_nswap); */
         return context->NewStringFromAsciiz(buffer);
     }
     else if (!strcasecmp(selector, "PRCVDSIG")) /* Process received signals*/
     {
         char buffer[100];
-        snprintf(buffer, sizeof(buffer), "Received_signals: %ld", struResUse.ru_nsignals);
+        /* snprintf(buffer, sizeof(buffer), "Received_signals: %ld", struResUse.ru_nsignals); */
         return context->NewStringFromAsciiz(buffer);
     }

--- oorexx-haiku-5.0.0/CMakeLists.txt	2019-02-20 15:39:37.870580224 +0000
+++ oorexx-haiku-5.0.0/CMakeLists.txt	2019-02-20 20:54:56.099352576 +0000
@@ -90,7 +90,7 @@
 
 
 # OOREXX_SHEBANG_PROGRAM default:
-set (OOREXX_SHEBANG_PROGRAM "/usr/bin/env rexx")
+set (OOREXX_SHEBANG_PROGRAM "/bin/env rexx")
 
 # if ORX_SHEBANG defined change default shebang accordingly
 if (ORX_SHEBANG)
@@ -250,7 +250,7 @@
    if( APPLE )
        SET( CMAKE_INSTALL_RPATH "@executable_path/../lib")
    else()
-       SET( CMAKE_INSTALL_RPATH "$ORIGIN/../lib")
+       SET( CMAKE_INSTALL_RPATH "/boot/home/config/non-packaged/lib")
    endif()
 
    # add the automatically determined parts of the RPATH
@@ -283,20 +283,20 @@
 
    set (INSTALL_EXECUTABLE_DIR ${CMAKE_INSTALL_PREFIX}/bin)
    set (INSTALL_CLS_DIR ${INSTALL_EXECUTABLE_DIR})
-   set (INSTALL_INCLUDE_DIR ${CMAKE_INSTALL_PREFIX}/include)
-   set (INSTALL_SAMPLES_DIR ${CMAKE_INSTALL_PREFIX}/share/${CMAKE_PROJECT_NAME})
-   set (INSTALL_MAN_DIR ${CMAKE_INSTALL_PREFIX}/share/man)
+   set (INSTALL_INCLUDE_DIR ${CMAKE_INSTALL_PREFIX}/develop)
+   set (INSTALL_SAMPLES_DIR ${CMAKE_INSTALL_PREFIX}/data/${CMAKE_PROJECT_NAME})
+   set (INSTALL_MAN_DIR ${CMAKE_INSTALL_PREFIX}/documentation/man)
 endif ()
 
 # Set compiler and linker flags common to all build environments
 # current trunk uses the C++ "override" keyword, which requires C++11
-if (CMAKE_VERSION VERSION_LESS "3.1")
-  if (CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
-    set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=gnu++11")
-  endif ()
-else ()
-  set (CMAKE_CXX_STANDARD 11)
-endif ()
+#if (CMAKE_VERSION VERSION_LESS "3.1")
+#  if (CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
+#    set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=gnu++11")
+#  endif ()
+#else ()
+#set (CMAKE_CXX_STANDARD 11)
+#endif ()
 
 include_directories(${PROJECT_BINARY_DIR})
 if (WIN32)
@@ -340,7 +340,7 @@
             -DORX_SHARED_LIBRARY_EXT="${CMAKE_SHARED_LIBRARY_SUFFIX}"
             -DORX_REXXPATH="${CMAKE_REXXPATH}"
             -D${ORX_SYS_STR} -DOPSYS_${ORX_SYS_STR} -DHAVE_CONFIG_H)
-    set (ORX_SYSLIB_DL dl)
+    #set (ORX_SYSLIB_DL dl)
     set (ORX_SYSLIB_PTHREAD pthread)
 endif ()
 
@@ -403,7 +403,7 @@
                            return 0;}"
                           HAVE_PTHREAD_MUTEX_RECURSIVE)
   # this requires -ldl on the link
-  set(CMAKE_REQUIRED_LIBRARIES dl)
+  #set(CMAKE_REQUIRED_LIBRARIES dl)
   check_c_source_compiles("#include <dlfcn.h>
                            int main(int arg, char **argv) {
                            Dl_info DlInfo;
@@ -440,6 +440,9 @@
                           HAVE_UNION_SEMUN)
   check_include_file(unistd.h HAVE_UNISTD_H)
   check_include_file(usersec.h HAVE_USERSEC_H)
+  if (CMAKE_SYSTEM_NAME MATCHES "Haiku")
+    set(CMAKE_REQUIRED_LIBRARIES ${CMAKE_REQUIRED_LIBRARIES} network)
+  endif ()
   if (CMAKE_SYSTEM_NAME MATCHES "(SunOS|Solaris)")
     check_library_exists(socket getaddrinfo "" HAVE_LIBSOCKET)
     if (HAVE_LIBSOCKET)
@@ -1340,7 +1343,7 @@
 # gcc (at least on Linux) requires linking with -lcrypt
 # clang (at least on Darwin) doesn't have libcrypt
 if (CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
-    target_link_libraries(rxunixsys rexx rexxapi crypt ${CMAKE_REQUIRED_LIBRARIES})
+    target_link_libraries(rxunixsys rexx rexxapi ${CMAKE_REQUIRED_LIBRARIES})
 else ()
     target_link_libraries(rxunixsys rexx rexxapi ${CMAKE_REQUIRED_LIBRARIES})
 endif ()
@@ -1797,9 +1800,9 @@
    add_manpage (rxqueue 1)
    add_manpage (rxsubcom 1)
 
-   install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/${build_platform_dir}/rexx.sh DESTINATION ${CMAKE_INSTALL_PREFIX}/share/${CMAKE_PROJECT_NAME} PERMISSIONS OWNER_EXECUTE GROUP_EXECUTE WORLD_EXECUTE OWNER_READ GROUP_READ WORLD_READ)
-   install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/${build_platform_dir}/rexx.csh DESTINATION ${CMAKE_INSTALL_PREFIX}/share/${CMAKE_PROJECT_NAME} PERMISSIONS OWNER_EXECUTE GROUP_EXECUTE WORLD_EXECUTE OWNER_READ GROUP_READ WORLD_READ)
-   install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/${build_samples_dir}/readme DESTINATION ${CMAKE_INSTALL_PREFIX}/share/${CMAKE_PROJECT_NAME})
+   install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/${build_platform_dir}/rexx.sh DESTINATION ${CMAKE_INSTALL_PREFIX}/data/${CMAKE_PROJECT_NAME} PERMISSIONS OWNER_EXECUTE GROUP_EXECUTE WORLD_EXECUTE OWNER_READ GROUP_READ WORLD_READ)
+   install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/${build_platform_dir}/rexx.csh DESTINATION ${CMAKE_INSTALL_PREFIX}/data/${CMAKE_PROJECT_NAME} PERMISSIONS OWNER_EXECUTE GROUP_EXECUTE WORLD_EXECUTE OWNER_READ GROUP_READ WORLD_READ)
+   install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/${build_samples_dir}/readme DESTINATION ${CMAKE_INSTALL_PREFIX}/data/${CMAKE_PROJECT_NAME})
 endif ()
 
 
